#!/usr/bin/env python3
"""
Script para configurar la base de datos en Laragon MySQL
"""

import pymysql
import sys

def test_mysql_connection():
    """Probar conexi√≥n a MySQL/MariaDB de Laragon"""
    try:
        # Configuraci√≥n por defecto de Laragon
        connection = pymysql.connect(
            host='localhost',
            port=3306,
            user='root',
            password='Admin123',  # Contrase√±a de Laragon
        )
        print("‚úÖ Conexi√≥n a MySQL/MariaDB exitosa")
        
        # Crear base de datos si no existe
        with connection.cursor() as cursor:
            cursor.execute("CREATE DATABASE IF NOT EXISTS ecuador_routes CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci")
            cursor.execute("USE ecuador_routes")
            print("‚úÖ Base de datos 'ecuador_routes' creada/verificada")
        
        connection.commit()
        connection.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Error conectando a MySQL: {e}")
        print("üí° Aseg√∫rate de que Laragon est√© ejecut√°ndose")
        return False

def test_app_connection():
    """Probar conexi√≥n desde la aplicaci√≥n Flask"""
    try:
        from app import app
        with app.app_context():
            from models import db, User
            
            # Probar crear tablas
            db.create_all()
            print("‚úÖ Tablas creadas exitosamente")
            
            # Probar insertar usuario de prueba
            test_user = User(username='test_db_connection')
            db.session.add(test_user)
            db.session.commit()
            print("‚úÖ Usuario de prueba insertado")
            
            # Verificar que el usuario existe
            found_user = User.query.filter_by(username='test_db_connection').first()
            if found_user:
                print("‚úÖ Usuario verificado en la base de datos")
                # Limpiar usuario de prueba
                db.session.delete(found_user)
                db.session.commit()
                print("‚úÖ Usuario de prueba eliminado")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Error en la aplicaci√≥n Flask: {e}")
        return False

if __name__ == '__main__':
    print("üîß Configurando base de datos para Sistema de Rutas del Ecuador")
    print("=" * 60)
    
    print("\n1. Probando conexi√≥n directa a MySQL...")
    mysql_ok = test_mysql_connection()
    
    if mysql_ok:
        print("\n2. Probando conexi√≥n desde Flask...")
        app_ok = test_app_connection()
        
        if app_ok:
            print("\nüéâ ¬°Configuraci√≥n exitosa!")
            print("‚úÖ MySQL/MariaDB funcionando correctamente")
            print("‚úÖ Flask puede conectarse y crear tablas")
            print("‚úÖ Las inserciones funcionan correctamente")
            print("\nüöÄ Puede ejecutar la aplicaci√≥n con:")
            print("python app.py")
        else:
            print("\n‚ö†Ô∏è  MySQL funciona pero hay problemas con Flask")
            print("üí° Revise la configuraci√≥n en config.py")
    else:
        print("\n‚ö†Ô∏è  MySQL no est√° disponible")
        print("üí° Opciones:")
        print("   1. Iniciar Laragon y activar MySQL/MariaDB")
        print("   2. La aplicaci√≥n usar√° SQLite como fallback")
        print("\nüöÄ Puede ejecutar la aplicaci√≥n de todas formas:")
        print("python app.py")
    
    print("=" * 60)
